{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "XCHEME",
	"patterns": [
		{
			"include": "#directives"
		},
		{
			"include": "#comments"
		}
	],
	"repository": {
		"directive-expression": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#identity-expression"
				},
				{
					"name": "keyword.control.as.xcheme",
					"match": "\\b(as)\\b"
				},
				{
					"include": "#expression"
				}
			]
		},
		"named-directives": {
			"begin": "\\b(token|node)\\b",
			"end": "(?=\\;)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.xcheme"
				}
			},
			"patterns": [
				{
					"include": "#directive-expression"
				}
			]
		},
		"aliased-directives": {
			"begin": "\\b(alias)\\b",
			"end": "(?=\\;)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.alias.xcheme"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#named-directives"
				}
			]
		},
		"unnamed-directives": {
			"begin": "\\b(skip)\\b",
			"end": "(?=\\;)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.xcheme"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"import-directives": {
			"begin": "\\b(import)\\b",
			"end": "(?=\\;)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.import.xcheme"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#string-expression"
				}
			]
		},
		"export-directives": {
			"begin": "\\b(export)\\b",
			"end": "(?=\\;)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.xcheme"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#named-directives"
				},
				{
					"include": "#aliased-directives"
				},
				{
					"include": "#reference-expression"
				}
			]
		},
		"condition-expression": {
			"begin": "\\b(then)\\b",
			"end": "(?<=\\b(else)\\b)|(?=\\)|\\;)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.conditional.xcheme"
				}
			},
			"patterns": [
				{
					"name": "keyword.control.conditional.xcheme",
					"match": "\\b(else)\\b"
				},
				{
					"include": "#expression"
				}
			]
		},
		"short-expressions": {
			"name": "keyword.operator.xcheme",
			"match": "\\||\\&|\\*|\\."
		},
		"control-expressions": {
			"name": "keyword.control.xcheme",
			"match": "\\b(or|and|not|opt|repeat|has)\\b"
		},
		"new-expressions": {
			"name": "keyword.operator.new.xcheme",
			"match": "\\b(place|append|prepend|pivot|symbol|scope|error|set)\\b"
		},
		"direction-expressions": {
			"name": "storage.modifier.xcheme",
			"match": "\\b(next|left|right)\\b"
		},
		"transform-expressions": {
			"name": "keyword.control.transform.xcheme",
			"match": "\\b(uncase)\\b"
		},
		"test-expressions": {
			"name": "keyword.control.peek.xcheme",
			"match": "\\b(peek)\\b"
		},
		"constant-expression": {
			"name": "constant.language.xcheme",
			"match": "\\b(any)\\b"
		},
		"map-block-expression": {
			"begin": "{",
			"end": "}",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.curly.xcheme"
				}
			},
			"endCaptures": {
				"0": {
					"name": "meta.brace.curly.xcheme"
				}
			},
			"patterns": [
				{
					"include": "#directive-expression"
				},
				{
					"name": "meta.comma.xcheme",
					"match": "\\,"
				}
			]
		},
		"map-expression": {
			"name": "keyword.control.map.xcheme",
			"match": "\\b(map)\\b",
			"patterns": [
				{
					"include": "#map-block-expression"
				}
			]
		},
		"range-expression": {
			"begin": "\\b(from)\\b",
			"end": "(?<=\\b(to)\\b)",
			"beginCaptures": {
				"1": {
					"name": "constant.language.range.xcheme"
				}
			},
			"patterns": [
				{
					"name": "constant.language.range.xcheme",
					"match": "\\b(to)\\b"
				},
				{
					"include": "#string-expression"
				}
			]
		},
		"string-expression": {
			"name": "string.quoted.single.xcheme",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.xcheme",
					"match": "\\\\."
				}
			]
		},
		"reference-expression": {
			"name": "entity.name.type.xcheme",
			"match": "[_[:alpha:]][_[:alnum:]]*"
		},
		"identity-expression": {
			"begin": "\\<",
			"end": "\\>",
			"beginCaptures": {
				"1": {
					"name": "meta.brace.angled.xcheme"
				}
			},
			"endCaptures": {
				"1": {
					"name": "meta.brace.angled.xcheme"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"name": "constant.language.auto.xcheme",
					"match": "\\b(auto)\\b"
				},
				{
					"name": "constant.numeric.xcheme",
					"match": "[[:digit:]]*"
				}
			]
		},
		"group-expression": {
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.round.xcheme"
				}
			},
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.xcheme"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"directives": {
			"patterns": [
				{
					"include": "#named-directives"
				},
				{
					"include": "#aliased-directives"
				},
				{
					"include": "#unnamed-directives"
				},
				{
					"include": "#import-directives"
				},
				{
					"include": "#export-directives"
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#condition-expression"
				},
				{
					"include": "#short-expressions"
				},
				{
					"include": "#control-expressions"
				},
				{
					"include": "#map-expression"
				},
				{
					"include": "#new-expressions"
				},
				{
					"include": "#direction-expressions"
				},
				{
					"include": "#transform-expressions"
				},
				{
					"include": "#test-expressions"
				},
				{
					"include": "#constant-expression"
				},
				{
					"include": "#range-expression"
				},
				{
					"include": "#string-expression"
				},
				{
					"include": "#reference-expression"
				},
				{
					"include": "#identity-expression"
				},
				{
					"include": "#group-expression"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.xcheme",
					"begin": "//",
					"end": "(?=$)"
				},
				{
					"name": "comment.block.xcheme",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		}
	},
	"scopeName": "source.xcheme"
}