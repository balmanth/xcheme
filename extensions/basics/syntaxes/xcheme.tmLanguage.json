{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "XCHEME",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#modifiers"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#entities"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.xcheme",
					"begin": "//",
					"end": "\\n"
				},
				{
					"name": "comment.block.xcheme",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.xcheme",
					"match": "\\b(skip|node|token)\\b"
				},
				{
					"name": "keyword.assignment.xcheme",
					"match": "\\b(as)\\b"
				},
				{
					"name": "keyword.control.xcheme",
					"match": "\\b(not|opt|rep|place)\\b"
				},
				{
					"name": "keyword.control.condition.xcheme",
					"match": "\\b(then|else)\\b"
				}
			]
		},
		"modifiers": {
			"patterns": [
				{
					"name": "storage.modifier.xcheme",
					"match": "\\b(alias|next|left|right)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.new.node.xcheme",
					"match": "\\b(pivot|append|prepend)\\b"
				},
				{
					"name": "keyword.operator.new.symbol.xcheme",
					"match": "\\b(symbol|scope)\\b"
				},
				{
					"name": "keyword.operator.logical.xcheme",
					"match": "\\b(and|or)\\b"
				},
				{
					"name": "keyword.operator.logical.symbol.xcheme",
					"match": "(\\||&)"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "constant.language.any.xcheme",
					"match": "\\b(any)\\b"
				},
				{
					"name": "constant.language.any.symbol.xcheme",
					"match": "(\\*)"
				},
				{
					"name": "constant.language.range.xcheme",
					"match": "\\b(from|to)\\b"
				},
				{
					"name": "constant.numeric.xcheme",
					"match": "\\b((0x[0-9A-F-a-f]*)|([1-9][0-9]*))\\b"
				}
			]
		},
		"entities": {
			"patterns": [
				{
					"name": "entity.name.type.xcheme",
					"match": "\\b([a-zA-Z_]([a-zA-Z0-9_]*)?)\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.single.xcheme",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.xcheme",
							"match": "\\\\."
						}
					]
				}
			]
		}
	},
	"scopeName": "source.xcheme"
}