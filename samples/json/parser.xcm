/**
 * A basic JSON parser.
 */
skip ' ' | '\t' | '\r' | '\n';

// Lexer
alias token T_DIGIT as from '0' to '9';
alias token T_END   as not (from 'A' to 'Z' | from 'a' to 'z' | '_' | T_DIGIT);

token<auto> T_MAP as map {
  <100> OBJECT_OPEN   as '{',
  <101> OBJECT_CLOSE  as '}',
  <102> ARRAY_OPEN    as '[',
  <103> ARRAY_CLOSE   as ']',
  <104> COLON         as ':',
  <105> COMMA         as ',',
  <106> TRUE          as 'true' & T_END,
  <107> FALSE         as 'false' & T_END,
  <108> NULL          as 'null' & T_END,
  <109> STRING        as '"' & repeat ('\\' then * else not '"' then *) & '"'
};

alias token T_INTEGER   as '0' | opt '-' & from '1' to '9' & opt repeat T_DIGIT;
alias token T_FRACTION  as '.' & repeat T_DIGIT;
alias token T_EXPONENT  as ('E' | 'e') & ('+' | '-') & T_DIGIT;

token<110> T_NUMBER     as T_INTEGER & opt T_FRACTION & opt T_EXPONENT;

// Parser
alias node<208> OBJECT_ELEMENT as append (T_MAP.STRING & T_MAP.COLON & VALUE) & opt (T_MAP.COMMA & place next OBJECT_ELEMENT);
alias node      ARRAY_ELEMENT  as VALUE & opt (T_MAP.COMMA & place next ARRAY_ELEMENT);

alias node<201> STRING  as append T_MAP.STRING;
alias node<202> NUMBER  as append T_NUMBER;
alias node<203> OBJECT  as T_MAP.OBJECT_OPEN & append opt OBJECT_ELEMENT & T_MAP.OBJECT_CLOSE;
alias node<204> ARRAY   as T_MAP.ARRAY_OPEN & append opt ARRAY_ELEMENT & T_MAP.ARRAY_CLOSE;
alias node<205> TRUE    as append T_MAP.TRUE;
alias node<206> FALSE   as append T_MAP.FALSE;
alias node<207> NULL    as append T_MAP.NULL;

alias node<209> VALUE   as STRING | NUMBER | OBJECT | ARRAY | TRUE | FALSE | NULL;

node<200> DOCUMENT  as OBJECT;