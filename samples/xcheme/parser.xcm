/**
 * A XCHEME Lang parser.
 */
skip ' ' | '\t' | '\v' | '\f' | '\r' | '\n';
skip '/*' & opt repeat (not '*/' then *) & '*/';
skip '//' & opt repeat (not '\n' then *);

// Lexer
alias token T_ALPHA as from 'A' to 'Z' | from 'a' to 'z';
alias token T_DIGIT as from '0' to '9';
alias token T_EXTRA as '_';
alias token T_WORD  as T_ALPHA | T_DIGIT | T_EXTRA;
alias token T_END   as not T_WORD;

token<101> T_NUMBER as '0' | from '1' to '9' & opt repeat T_DIGIT;
token<102> T_STRING as '\'' & repeat ('\\' then * else not '\'' then *) & '\'';

token<103> T_ANY    as ('any' & T_END) | '*';
token<104> T_FROM   as 'from' & T_END;
token<105> T_TO     as 'to' & T_END;

token<106> T_THEN   as 'then' & T_END;
token<107> T_ELSE   as 'else' & T_END;

token<108> T_OR     as ('or' & T_END) | '|';
token<109> T_AND    as ('and' & T_END) | '&';

token<110> T_NOT    as 'not' & T_END;
token<111> T_OPT    as 'opt' & T_END;
token<112> T_REPEAT as 'repeat' & T_END;

token<113> T_PLACE  as 'place' & T_END;
token<114> T_APPEND as 'append' & T_END;
token<115> T_PRPEND as 'prepend' & T_END;
token<116> T_PIVOT  as 'pivot' & T_END;
token<117> T_NEXT   as 'next' & T_END;
token<118> T_LEFT   as 'left' & T_END;
token<119> T_RIGHT  as 'right' & T_END;

token<120> T_SYMBOL as 'symbol' & T_END;
token<121> T_SCOPE  as 'scope' & T_END;

token<122> T_ERROR  as 'error' & T_END;

token<123> T_HAS    as 'has' & T_END;
token<124> T_SET    as 'set' & T_END;

token<125> T_SKIP   as 'skip' & T_END;
token<126> T_ALIAS  as 'alias' & T_END;
token<127> T_TOKEN  as 'token' & T_END;
token<128> T_NODE   as 'node' & T_END;
token<129> T_AS     as 'as' & T_END;

token<130> T_SEMICOLON      as ';';
token<131> T_GROUP_OPEN     as '(';
token<132> T_GROUP_CLOSE    as ')';
token<133> T_IDENTITY_OPEN  as '<';
token<134> T_IDENTITY_CLOSE as '>';

token<100> T_IDENTIFIER as (T_ALPHA | T_EXTRA) & opt repeat T_WORD;

// Parser
alias node GROUP      as place (T_GROUP_OPEN & EXPRESSION & T_GROUP_CLOSE);
alias node OPERAND    as ANY | ALPHABET | REFERENCE | RANGE | GROUP;
alias node EXPRESSION as OR & opt THEN;

alias node<201> REFERENCE   as append T_IDENTIFIER;
alias node<202> IDENTITY    as T_IDENTITY_OPEN & append (T_NUMBER & T_IDENTITY_CLOSE);
alias node<203> ALPHABET    as append T_STRING;
alias node<204> ANY         as append T_ANY;
alias node<205> RANGE       as place (T_FROM & ALPHABET & pivot (T_TO & ALPHABET));

alias node<230> SET         as append (T_SET & IDENTITY);
alias node<229> HAS         as append (T_HAS & IDENTITY);
alias node<228> ERROR       as append (T_ERROR & IDENTITY);
alias node<227> SCOPE       as append T_SCOPE; 
alias node<226> SYMBOL      as append T_SYMBOL; 
alias node<225> PIVOT       as append T_PIVOT;

alias node<224> PREPEND     as append T_PRPEND;
alias node<223> PREPEND_R   as append (T_PRPEND & T_RIGHT);
alias node<222> PREPEND_L   as append (T_PRPEND & T_LEFT);
alias node<221> PREPEND_N   as append (T_PRPEND & T_NEXT);

alias node<220> APPEND      as append T_APPEND;
alias node<219> APPEND_R    as append (T_APPEND & T_RIGHT);
alias node<218> APPEND_L    as append (T_APPEND & T_LEFT);
alias node<217> APPEND_N    as append (T_APPEND & T_NEXT);

alias node<216> PLACE       as append T_PLACE;
alias node<215> PLACE_R     as append (T_PLACE & T_RIGHT);
alias node<214> PLACE_L     as append (T_PLACE & T_LEFT);
alias node<213> PLACE_N     as append (T_PLACE & T_NEXT);

alias node<212> REPEAT      as append T_REPEAT;
alias node<211> OPTIONAL    as append T_OPT;
alias node<210> NOT         as append T_NOT;

alias node UNARY  as  opt repeat (NOT | OPTIONAL | REPEAT |
                      PLACE_N | PLACE_L | PLACE_R | PLACE |
                      APPEND_N | APPEND_L | APPEND_R | APPEND |
                      PREPEND_N | PREPEND_L | PREPEND_R | PREPEND |
                      PIVOT | SYMBOL | SCOPE | ERROR | SET | HAS) & OPERAND;

alias node<209> AND   as UNARY & opt repeat pivot (T_AND & UNARY);
alias node<208> OR    as AND & opt repeat pivot (T_OR & AND);

alias node<207> ELSE  as pivot (T_ELSE & EXPRESSION);
alias node<206> THEN  as pivot (T_THEN & EXPRESSION & opt ELSE);

alias node<200> IDENTIFIER    as (pivot T_IDENTIFIER & T_AS & place EXPRESSION);

alias node<300> TOKEN_SYMBOL  as T_TOKEN & opt IDENTITY & symbol IDENTIFIER;
alias node<301> NODE_SYMBOL   as T_NODE & opt IDENTITY & symbol IDENTIFIER;

node<231> SKIP        as T_SKIP & place EXPRESSION & T_SEMICOLON;
node<235> ALIAS_TOKEN as T_ALIAS & TOKEN_SYMBOL & T_SEMICOLON;
node<234> ALIAS_NODE  as T_ALIAS & NODE_SYMBOL & T_SEMICOLON;
node<233> TOKEN       as TOKEN_SYMBOL & T_SEMICOLON;
node<232> NODE        as NODE_SYMBOL & T_SEMICOLON;
