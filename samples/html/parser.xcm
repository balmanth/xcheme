/**
 * A basic HTML parser.
 */
skip ' ' | '\t' | '\v' | '\f' | '\r' | '\n';
skip '<!--' & opt repeat (not '-->' then *) & '-->';

// Lexer
alias token ALPHA as uncase from 'a' to 'z';
alias token DIGIT as from '0' to '9';

alias token SELF_CLOSED_TAGS as uncase map {
  'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input',
  'keygen', 'link', 'meta', 'source', 'track', 'wbr'
};

token DOC_START   as set<3> '<!' & uncase 'doctype';
token DOC_TYPE    as has<3> repeat (not ('>') then any);
token DOC_END     as has<3> set<0> '>';

token TAG_OPEN    as set<1> '<';
token TAG_END     as has<1> '/' | has<2> '/';
token TAG_SC_NAME as has<1> set<2> SELF_CLOSED_TAGS;
token TAG_NAME    as has<1> set<2> (ALPHA & opt repeat (ALPHA | DIGIT | '-' | '_' | ':'));
token TAG_CLOSE   as has<2> set<0> '>';

token TEXT_DATA   as has<0> repeat (not ('<') then any);

token ATTR_NAME   as has<2> (ALPHA & opt repeat (ALPHA | DIGIT | '-' | '_' | ':'));
token ATTR_ASSIGN as has<2> '=';
token ATTR_SQ_STR as has<2> ('\'' & repeat ('\\' then * else not '\'' then *) & '\'');
token ATTR_DQ_STR as has<2> ('"' & repeat ('\\' then * else not '"' then *) & '"');

// Parser
alias node<208> ATTR_VALUE  as append (ATTR_SQ_STR | ATTR_DQ_STR);
alias node<209> ATTR_ENTRY  as append next (ATTR_NAME & opt (ATTR_ASSIGN & ATTR_VALUE));
alias node<210> ATTR_LIST   as append opt repeat ATTR_ENTRY;

alias node<205> ELM_DATA    as append repeat TEXT_DATA;
alias node<206> ELM_VOIDED  as TAG_OPEN & append (TAG_SC_NAME & ATTR_LIST & opt TAG_END & TAG_CLOSE);
alias node<206> ELM_CLOSED  as TAG_OPEN & append (TAG_NAME & ATTR_LIST & TAG_END & TAG_CLOSE);

alias node<207> ELM_GROUPED as TAG_OPEN & append (TAG_NAME & ATTR_LIST & TAG_CLOSE) & opt CHILDREN &
                               opt (TAG_OPEN & TAG_END & TAG_NAME & TAG_CLOSE);

alias node<202> DOCUMENT  as DOC_START & append (repeat DOC_TYPE & DOC_END);
alias node<203> CHILDREN  as append next repeat place next ELEMENT;
alias node<204> ELEMENT   as append (ELM_DATA | ELM_VOIDED | ELM_CLOSED | ELM_GROUPED);

node<200> TYPE as DOCUMENT;
node<201> ROOT as CHILDREN;